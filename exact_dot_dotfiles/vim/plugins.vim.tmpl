call plug#begin('~/.vim/plugged')

" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'chrisbra/unicode.vim'
Plug 'drzel/vim-line-no-indicator'
Plug 'editorconfig/editorconfig-vim'
Plug 'itchyny/lightline.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kshenoy/vim-signature'
Plug 'mbbill/undotree'
Plug 'mg979/vim-visual-multi'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/jsonc.vim'
Plug 'posva/vim-vue'
Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
Plug 'sheerun/vim-polyglot'
Plug 'sodapopcan/vim-twiggy'
Plug 'suy/vim-context-commentstring'
Plug 'svermeulen/vim-easyclip'
Plug 'towolf/vim-helm'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-test/vim-test'
Plug 'Yilin-Yang/vim-markbar'

{{- if .lang.java }}
Plug 'aklt/plantuml-syntax'
Plug 'scrooloose/vim-slumlord'
{{- end }}

call plug#end()

" vim-vue options
" ---------------
let g:vue_pre_processors = 'detect_on_enter'

" vim-align options
" ----------------
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" vim-test options
" ----------------
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>nmap <silent> t<C-g> :TestVisit<CR

" open tests in a tmux pane
let test#strategy = 'neovim'

" set test matcher for Jest
let g:test#javascript#jest#file_pattern = '\v((test|__tests__/).*|(spec|test)?)\.(js|jsx|coffee|ts|tsx)$'

" fzf options
" ----------
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
map <silent> <C-p> :GFiles<Cr>
map <silent> <C-P> :Files<Cr>
map <Leader>f :Rg<Space>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

command! Lint cexpr system("npm run lint --silent -- -f unix") | cw

" Fugitive options
" ----------------
map <Leader>G :tabnew<CR>:G<CR><c-W>o

" Undotree options
" ----------------
nnoremap <Leader>u :UndotreeToggle<cr>
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_TreeNodeShape = '•'
let g:undotree_HelpLine = 0

" Easy Clip options
" =================
nnoremap gm m

" Vim MarkBar options
" ===================
nmap <Leader>m <Plug>ToggleMarkbar

" LineNoIndicator options
" =======================
let g:line_no_indicator_chars = [
\  '○○○○○',
\  '●○○○○',
\  '●●○○○',
\  '●●●○○',
\  '●●●●○',
\  '●●●●●'
\]

" Vim Signature options
" =====================
let g:SignatureMap = {
\ 'Leader'             :  "M",
\ 'PlaceNextMark'      :  "M,",
\ 'ToggleMarkAtLine'   :  "M.",
\ 'PurgeMarksAtLine'   :  "M-",
\ 'DeleteMark'         :  "dM",
\ 'PurgeMarks'         :  "M<Space>",
\ 'PurgeMarkers'       :  "M<BS>",
\ }

" Twigger Options
" ===============
noremap <Leader>B :Twiggy<CR>

" Vim Visual Multi Options
" ========================
