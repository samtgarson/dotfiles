call plug#begin('~/.vim/plugged')

Plug 'L3MON4D3/LuaSnip'
Plug 'Yilin-Yang/vim-markbar'
Plug 'bfredl/nvim-luadev'
Plug 'chrisbra/unicode.vim'
Plug 'crispgm/nvim-tabline'
Plug 'doums/lsp_status'
Plug 'drzel/vim-line-no-indicator'
Plug 'editorconfig/editorconfig-vim'
Plug 'folke/lua-dev.nvim'
Plug 'folke/which-key.nvim'
Plug 'tami5/lspsaga.nvim', { 'branch': 'nvim51' }
Plug 'hoob3rt/lualine.nvim'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/nvim-cmp'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'junegunn/vim-easy-align'
Plug 'kdheepak/lazygit.nvim'
Plug 'kshenoy/vim-signature'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'lewis6991/gitsigns.nvim'
Plug 'luukvbaal/stabilize.nvim'
Plug 'mbbill/undotree'
Plug 'mg979/vim-visual-multi'
Plug 'neoclide/jsonc.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/lsp-status.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-refactor'
Plug 'pantharshit00/vim-prisma'
Plug 'ray-x/cmp-treesitter'
Plug 'romainl/vim-qf'
Plug 'shaunsingh/moonlight.nvim'
Plug 'sodapopcan/vim-twiggy'
Plug 'suy/vim-context-commentstring'
Plug 'svermeulen/vim-easyclip'
Plug 'towolf/vim-helm'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-test/vim-test'
Plug 'williamboman/nvim-lsp-installer'

{{- if .lang.java }}
Plug 'aklt/plantuml-syntax'
Plug 'scrooloose/vim-slumlord'
{{- end }}

call plug#end()

" vim-vue options
" ---------------
let g:vue_pre_processors = 'detect_on_enter'

" vim-align options
" ----------------
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" vim-test options
" ----------------
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" open tests in a tmux pane
let test#strategy = 'neovim'

" set test matcher for Jest
let g:test#javascript#jest#file_pattern = '\v((test|__tests__/).*|(spec|test)?)\.(js|jsx|coffee|ts|tsx)$'

" LazyGit options
" ----------------
map <Leader>G :LazyGit<CR>
let g:lazygit_floating_window_scaling_factor = 1
let g:lazygit_floating_window_use_plenary = 0

" Undotree options
" ----------------
nnoremap <Leader>u :UndotreeToggle<cr>
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_TreeNodeShape = '•'
let g:undotree_HelpLine = 0

" Easy Clip options
" =================
nnoremap gm m

" Vim MarkBar options
" ===================
nmap <Leader>m <Plug>ToggleMarkbar

" LineNoIndicator options
" =======================
let g:line_no_indicator_chars = [
\  '○○○○○',
\  '●○○○○',
\  '●●○○○',
\  '●●●○○',
\  '●●●●○',
\  '●●●●●'
\]

" Vim Signature options
" =====================
let g:SignatureMap = {
\ 'Leader'             :  "M",
\ 'PlaceNextMark'      :  "M,",
\ 'ToggleMarkAtLine'   :  "M.",
\ 'PurgeMarksAtLine'   :  "M-",
\ 'DeleteMark'         :  "dM",
\ 'PurgeMarks'         :  "M<Space>",
\ 'PurgeMarkers'       :  "M<BS>",
\ }

" Twigger Options
" ===============
noremap <Leader>B :Twiggy<CR>

" Vim Visual Multi options
" ========================
let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<C-d>'
let g:VM_maps['Find Subword Under'] = '<C-d>'

" vim-qf Options
" ==============
function! ToggleQf ()
  if empty(filter(getwininfo(), 'v:val.quickfix')) && empty(filter(getwininfo(), 'v:val.loclist'))
    lua vim.lsp.diagnostic.set_loclist { workspace = true }
  else
    cclose
    lclose
  endif
endfunction
nmap ]q <Plug>(qf_qf_next)
nmap [q <Plug>(qf_qf_previous)
nmap <Leader>j <Plug>(qf_qf_switch)
nmap <silent> <Leader><CR> <cmd>call ToggleQf()<CR>
let g:qf_bufname_or_text = 1
